{
	"info": {
		"_postman_id": "89895607-a1b2-4007-bd41-79afa6939733",
		"name": "QuickLinker",
		"description": "This Postman collection is designed for testing the endpoints of QuickLinker API. The QuickLinker Service allows users to create shortened URLs for long web addresses, making them easier to share and manage. The API provides endpoints for creating shortened links and resolving them to their original destinations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31575166"
	},
	"item": [
		{
			"name": "Create Shortened Valid Link",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"    pm.expect(pm.response.text()).to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response body is a valid JSON format\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"",
							"pm.test(\"Response contains the short link URL\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.a('string');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"originalURL\" : \"https://www.google.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/shortlink",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"shortlink"
					]
				},
				"description": "Generates a shortened URL for a given original URL. Requires a JSON payload containing the original URL."
			},
			"response": []
		},
		{
			"name": "Create Shortened Not Valid Link",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.errors).to.exist;",
							"    pm.expect(responseData.type).to.exist;",
							"    pm.expect(responseData.title).to.exist;",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.traceId).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"OriginalURL is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.errors.OriginalURL).to.be.an('array').that.is.not.empty;",
							"    pm.expect(responseData.errors.OriginalURL[0]).to.be.a('string').and.to.have.lengthOf.at.least(1, \"OriginalURL should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"originalURL\" : \"google.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/shortlink",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"shortlink"
					]
				},
				"description": "Sending an empty or invalid JSON payload results in a 400 Bad Request response."
			},
			"response": []
		},
		{
			"name": "Resolve Shortened Valid Link",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/rGu2aeQORK",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rGu2aeQORK"
					]
				},
				"description": "Resolves a shortened URL to its original destination. Requires the base url and related short code."
			},
			"response": []
		},
		{
			"name": "Resolve Shortened Not Exist Link",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response body structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.type).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.title).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.traceId).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/rGu2aeQORM",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rGu2aeQORM"
					]
				},
				"description": "Providing an invalid or non-existent short link results in a 404 Not Found response."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://localhost:7132",
			"type": "string"
		}
	]
}